--- wiz_socket.c	2020-12-01 17:45:13.474682643 +0900
+++ wiz_socket.c	2020-11-30 10:44:03.145529792 +0900
@@ -53,7 +53,7 @@
 //! THE POSSIBILITY OF SUCH DAMAGE.
 //
 //*****************************************************************************
-#include "socket.h"
+#include "wiz_socket.h"
 
 //M20150401 : Typing Error
 //#define SOCK_ANY_PORT_NUM  0xC000;
@@ -102,7 +102,7 @@ uint8_t  sock_pack_info[_WIZCHIP_SOCK_NU
 
 
 
-int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
+int8_t wiz_socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
 {
 	CHECK_SOCKNUM();
 	switch(protocol)
@@ -166,7 +166,7 @@ int8_t socket(uint8_t sn, uint8_t protoc
    	      break;
    	}
    }
-	close(sn);
+	wiz_close(sn);
 	//M20150601
 	#if _WIZCHIP_ == 5300
 	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
@@ -195,7 +195,7 @@ int8_t socket(uint8_t sn, uint8_t protoc
    return (int8_t)sn;
 }	   
 
-int8_t close(uint8_t sn)
+int8_t wiz_close(uint8_t sn)
 {
 	CHECK_SOCKNUM();
 //A20160426 : Applied the erratum 1 of W5300
@@ -220,7 +220,7 @@ int8_t close(uint8_t sn)
       setSn_CR(sn,Sn_CR_OPEN);
       while(getSn_CR(sn) != 0);
       while(getSn_SR(sn) != SOCK_UDP);
-      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
+      wiz_sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
    };   
 #endif 
 	setSn_CR(sn,Sn_CR_CLOSE);
@@ -238,7 +238,7 @@ int8_t close(uint8_t sn)
 	return SOCK_OK;
 }
 
-int8_t listen(uint8_t sn)
+int8_t wiz_listen(uint8_t sn)
 {
 	CHECK_SOCKNUM();
    CHECK_SOCKMODE(Sn_MR_TCP);
@@ -247,14 +247,14 @@ int8_t listen(uint8_t sn)
 	while(getSn_CR(sn));
    while(getSn_SR(sn) != SOCK_LISTEN)
    {
-         close(sn);
+         wiz_close(sn);
          return SOCKERR_SOCKCLOSED;
    }
    return SOCK_OK;
 }
 
 
-int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
+int8_t wiz_connect(uint8_t sn, uint8_t * addr, uint16_t port)
 {
    CHECK_SOCKNUM();
    CHECK_SOCKMODE(Sn_MR_TCP);
@@ -294,7 +294,7 @@ int8_t connect(uint8_t sn, uint8_t * add
    return SOCK_OK;
 }
 
-int8_t disconnect(uint8_t sn)
+int8_t wiz_disconnect(uint8_t sn)
 {
    CHECK_SOCKNUM();
    CHECK_SOCKMODE(Sn_MR_TCP);
@@ -307,14 +307,14 @@ int8_t disconnect(uint8_t sn)
 	{
 	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 	   {
-	      close(sn);
+	      wiz_close(sn);
 	      return SOCKERR_TIMEOUT;
 	   }
 	}
 	return SOCK_OK;
 }
 
-int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
+int32_t wiz_send(uint8_t sn, uint8_t * buf, uint16_t len)
 {
    uint8_t tmp=0;
    uint16_t freesize=0;
@@ -344,7 +344,7 @@ int32_t send(uint8_t sn, uint8_t * buf, 
       }
       else if(tmp & Sn_IR_TIMEOUT)
       {
-         close(sn);
+         wiz_close(sn);
          return SOCKERR_TIMEOUT;
       }
       else return SOCK_BUSY;
@@ -357,7 +357,7 @@ int32_t send(uint8_t sn, uint8_t * buf, 
       tmp = getSn_SR(sn);
       if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
       {
-         close(sn);
+         wiz_close(sn);
          return SOCKERR_SOCKSTATUS;
       }
       if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
@@ -382,7 +382,7 @@ int32_t send(uint8_t sn, uint8_t * buf, 
 }
 
 
-int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
+int32_t wiz_recv(uint8_t sn, uint8_t * buf, uint16_t len)
 {
    uint8_t  tmp = 0;
    uint16_t recvsize = 0;
@@ -417,13 +417,13 @@ int32_t recv(uint8_t sn, uint8_t * buf, 
                if(recvsize != 0) break;
                else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
                {
-                  close(sn);
+                  wiz_close(sn);
                   return SOCKERR_SOCKSTATUS;
                }
             }
             else
             {
-               close(sn);
+               wiz_close(sn);
                return SOCKERR_SOCKSTATUS;
             }
          }
@@ -487,7 +487,7 @@ int32_t recv(uint8_t sn, uint8_t * buf, 
    return (int32_t)len;
 }
 
-int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
+int32_t wiz_sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
 {
    uint8_t tmp = 0;
    uint16_t freesize = 0;
@@ -591,7 +591,7 @@ int32_t sendto(uint8_t sn, uint8_t * buf
 
 
 
-int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
+int32_t wiz_recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
 {
 //M20150601 : For W5300   
 #if _WIZCHIP_ == 5300
@@ -710,7 +710,7 @@ int32_t recvfrom(uint8_t sn, uint8_t * b
 			#endif
    			if(sock_remained_size[sn] > 1514) 
    			{
-   			   close(sn);
+   			   wiz_close(sn);
    			   return SOCKFATAL_PACKLEN;
    			}
    			sock_pack_info[sn] = PACK_FIRST;
@@ -773,7 +773,7 @@ int32_t recvfrom(uint8_t sn, uint8_t * b
 }
 
 
-int8_t  ctlsocket(uint8_t sn, ctlsock_type cstype, void* arg)
+int8_t  wiz_ctlsocket(uint8_t sn, ctlsock_type cstype, void* arg)
 {
    uint8_t tmp = 0;
    CHECK_SOCKNUM();
@@ -819,7 +819,7 @@ int8_t  ctlsocket(uint8_t sn, ctlsock_ty
    return SOCK_OK;
 }
 
-int8_t  setsockopt(uint8_t sn, sockopt_type sotype, void* arg)
+int8_t  wiz_setsockopt(uint8_t sn, sockopt_type sotype, void* arg)
 {
  // M20131220 : Remove warning
  //uint8_t tmp;
@@ -872,7 +872,7 @@ int8_t  setsockopt(uint8_t sn, sockopt_t
    return SOCK_OK;
 }
 
-int8_t  getsockopt(uint8_t sn, sockopt_type sotype, void* arg)
+int8_t  wiz_getsockopt(uint8_t sn, sockopt_type sotype, void* arg)
 {
    CHECK_SOCKNUM();
    switch(sotype)
