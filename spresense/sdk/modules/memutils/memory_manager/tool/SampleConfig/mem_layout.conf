############################################################################
# modules/memutils/memory_manager/tool/SampleConfig/mem_layout.conf
#
#   Copyright 2018 Sony Semiconductor Solutions Corporation
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with the
#    distribution.
# 3. Neither the name of Sony Semiconductor Solutions Corporation nor
#    the names of its contributors may be used to endorse or promote
#    products derived from this software without specific prior written
#    permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
# OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
# AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
############################################################################

#############################################################################
# MemoryManager Configuration
#
UseFence = true  # Setting whether to use pool fence or not

require "mem_layout.rb"

#############################################################################
# User defined constants
#  Start with "U_" so that it does not overlap with the definition
#  in the script, only upper case letters, numbers and "_".
#  When defined with a name starting with "U_MEM_",
#  macros of the same name are output to output_header
#

U_MEM_ALLEGRO_CACHE_ALIGN  = 64
U_MEM_ALLEGRO_OFFSET_ALIGN = 0x1000

#############################################################################
# Memory device definition
#  The name_ADDR macro and the name_SIZE macro are output to output_header
#
# name: Device name (3 or more characters, starting with upper case letters,
#                    capital letters, numbers, "_" can be used)
# ram : True if the device is RAM. False otherwise
# addr: Address (value of multiples of 4)
# size: Size in bytes (values of multiples of 4 excluding 0)
#
MemoryDevices.init(
 # example for Allegro ISS environment
  # name     ram    addr        size
  ["DRAM",   true,  0x00000000, 0x08000000], # 128MB
  ["SRAM",   true,  0x1fc00000, 0x00040000], # 256KB

 # example for Beaune JTAG debug environment
#  ["CDRAM",   true,  0x00000000, 0x08000000], # 128MB Cached DRAM
#  ["LPDDR",   true,  0x08000000, 0x08000000], # 128MB LPDDR DRAM for JTAG debug
#  ["OCM",     true,  0x1fc00000, 0x00040000], # 256KB On Chip Memory (SRAM)
  nil # end of definition
)

#############################################################################
# Fixed area definition
#  name_ALIGN, name_ADDR, name_SIZE macros are output to output_header
#  If the fence is valid, the name_L_FENCE and name _U_FENCE macros
#  are also output
#
# name  : Area name (name beginning with uppercase letters and ending
#                    with "_AREA", uppercase letters,
#                    numbers, "_" can be used)
# device: Device name of MemoryDevices securing space
# align : Starting alignment of the region.
#         Specify a multiple of MinAlign (= 4) except 0
# size  : Starting alignment of the region.
#         Specify a multiple of MinAlign (= 4) except 0
#         In the final area of each device, you can specify RemainderSize
#         indicating the remaining size
# fence : Specify validity / invalidity of fence
#         (This item is ignored when UseFence is false)
#
FixedAreas.init(
  # name,              device, align,                     size,          fence
  ["MAIN_MODULE_AREA", "DRAM", MinAlign,                  0x00420000,    false],
  ["DUMP_LOG_AREA",    "DRAM", U_MEM_ALLEGRO_CACHE_ALIGN, 0x00010000,    false],
  ["MEMMGR_POOL_AREA", "DRAM", U_MEM_ALLEGRO_CACHE_ALIGN, RemainderSize, false],

  ["BOOT_MODULE_AREA", "SRAM", MinAlign,                  0x00004000,    false],
  nil # end of definition
)

##############################################################################
# Pool layout definition
#  For output_header, pool ID and NUM_MEM_POOLS, NUM_MEM_LAYOUTS and
#  Lx_name_ALIGN, Lx_name_ADDR, Lx_name_SIZE, Lx_name_NUM_SEG, Lx_name_SEG_SIZE
#  Macros are output (x is the layout number)
#  If the fence is valid, the Lx_name_L_FENCE and Lx_name_U_FENCE macros
#  are also output
#
# name : Pool name (name beginning with upper case letters and ending
#        with "_POOL", upper case letters, numbers, "_" can be used)
# area : Area name of FixedArea to be used as pool area.
#        The area must be located in the RAM
# align: Starting alignment of the pool.
#        Specify a multiple of MinAlign (= 4) except 0
# size : Size of the pool. A value of a multiple of 4 except 0.
#        In the Basic pool, you can specify segment size * number of segments.
#        In the final area of each area, RemainderSize indicating
#        the remaining size can be specified
# seg  : Specify the number of segments (1 or more, 255 or 65535 or less).
#        See UseOver255Segments.
#        For Basic pool, size / seg is the size of each segment
#        (the remainder is ignored)
# fence: Specify whether the fence is valid or invalid.
#        This item is ignored when UseFence is false
#
PoolAreas.init(
  [ # layout 0
   #[ name,        area,              align,                     size,         seg, fence]
    ["ID1_POOL",  "MEMMGR_POOL_AREA", U_MEM_ALLEGRO_CACHE_ALIGN,   80 *140,    140, false],
    ["ID2_POOL",  "MEMMGR_POOL_AREA", U_MEM_ALLEGRO_CACHE_ALIGN,  144 *130,    130, false],
    ["ID3_POOL",  "MEMMGR_POOL_AREA", U_MEM_ALLEGRO_CACHE_ALIGN,  304 * 16,     16, false],
    ["ID4_POOL",  "MEMMGR_POOL_AREA", U_MEM_ALLEGRO_CACHE_ALIGN, 1088 * 26,     26, false],
    ["ID5_POOL",  "MEMMGR_POOL_AREA", U_MEM_ALLEGRO_CACHE_ALIGN, 4160 *  3,      3, false],
    nil # end of each layout
  ], # end of layout 0

  nil # end of definition
)

# generate header file and source file
generate_files
